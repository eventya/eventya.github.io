{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Eventya Docs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"devops/","title":"Continuous Integration","text":"<p>This documentation explains the workflow for creating releases in our project using GitHub Actions. Below is a step-by-step explanation of its functionality, including branch naming conventions, PR requirements, and the automated tasks performed by the workflow.</p>"},{"location":"devops/#purpose","title":"Purpose","text":"<p>This workflow automates the process of:</p> <ul> <li>Merging PRs into the <code>release/</code> branches.</li> <li>Generating release notes from merged PRs.</li> <li>Incrementing the version number.</li> <li>Tagging the release with the new version.</li> <li>Creating a GitHub release for future logs and reports.</li> </ul>"},{"location":"devops/#diagram","title":"Diagram","text":"<p>To visualize the release process, we have created a diagram that outlines branch naming conventions, PR requirements, and the automated tasks handled by the GitHub Actions workflow.</p> <p>Figure 1: CI Workflow Diagram</p> <p></p>"},{"location":"devops/#1-branches-naming-convention","title":"1. Branches naming convention","text":"<p>The project follows a clear branch naming convention for organization and consistency:</p> <ul> <li>Feature Branches (<code>feature/</code>): Used for new functionality (e.g., <code>feature/add-user-authentication</code>).</li> <li>Fix Branches (<code>fix/</code>): Used for bug fixes (e.g., <code>fix/avatar-display-error</code>).</li> <li>Support Branches (<code>support/</code>): Used for infrastructure/configuration updates (e.g., <code>support/update-database-url</code>).</li> <li>Release Branches (<code>release/</code>): Combines multiple feature, fix, and support branches for testing and deployment (e.g., <code>release/feature_user_auth_and_bug_fix</code>).</li> </ul>"},{"location":"devops/#2-pull-request-pr-requirements","title":"2. Pull Request (PR) Requirements","text":"<p>To ensure code quality, every PR must meet the following requirements:</p> <ul> <li>Non-Technical Descriptions: Each PR must include a clear explanation of the changes. Example: \"Adds support for sending notification emails from the CMS.\"</li> <li>Automated Testing: All PRs must pass tests (e.g., RSpec, Rubocop) before merging.</li> </ul>"},{"location":"devops/#3-release-pipeline","title":"3. Release Pipeline","text":"<p>This section outlines the key automated tasks in the release process:</p> <ol> <li>Create a Release Branch: Developers merge multiple feature, fix, and support branches into a <code>release/</code> branch.</li> <li> <p>Merge into <code>test_master</code>: This triggers the GitHub Actions workflow to perform the following steps:</p> <ul> <li>Generate Release Notes: Extract PR titles and descriptions into a <code>release_notes.txt</code> file.</li> <li>Increment Version: Update the version in <code>version.txt</code> (e.g., <code>4.0.0</code> \u2192 <code>4.0.1</code>).</li> <li>Create a Git Tag: Tag the release version (e.g., <code>v4.0.1</code>).</li> <li>Publish a GitHub Release: Attach release notes and mark the release as stable.</li> </ul> </li> </ol>"},{"location":"devops/#4-key-takeaways","title":"4. Key Takeaways","text":"<ul> <li>Streamlined Workflow: A consistent process for testing, merging, and releasing changes.</li> <li>Automation: Saves time by automating tasks like release notes, versioning, and tagging.</li> <li>Transparency: Clear descriptions ensure releases are easy to understand for technical and non-technical stakeholders.</li> </ul>"},{"location":"devops/#5-workflow-script-overview","title":"5. Workflow Script Overview","text":"<p>This section breaks down the key parts of the GitHub Actions script.</p>"},{"location":"devops/#51-checkout-code","title":"5.1. Checkout Code","text":"<p>The workflow starts by checking out the repository's code. This ensures all required files, including <code>version.txt</code>, are available.</p>"},{"location":"devops/#52-fetch-merged-prs","title":"5.2. Fetch Merged PRs","text":"<p>The script fetches all PRs that have been merged into the <code>release/</code> branch. It identifies PRs based on merge commit messages and retrieves:</p> <ul> <li>Title</li> <li>Description</li> <li>PR Number</li> </ul> <p>Code Example:</p> <pre><code>const prList = [];\nconst releaseBranch = 'test_master';\n\n// Fetch all closed PRs for the branch\nconst prs = await github.rest.pulls.list({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  state: 'closed',\n  base: releaseBranch\n});\n\n// Sort and retrieve the latest PR\nconst latestPr = prs.data.sort((a, b) =&gt; new Date(b.created_at) - new Date(a.created_at))[0];\n</code></pre>"},{"location":"devops/#53-generate-release-notes","title":"5.3. Generate Release Notes","text":"<p>The release notes are written to a file (<code>release_notes.txt</code>) for later use.</p> <p>Example contents of <code>release_notes.txt</code>:</p> <pre><code>**Feature: Update Notifications** - #123: Adds notification updates to CMS.\n**Bug Fix: Undefined Avatar** - #124: Fixes a bug causing undefined avatars.\n</code></pre>"},{"location":"devops/#54-increment-version","title":"5.4. Increment Version","text":"<p>The workflow reads the current version from <code>version.txt</code> and increments the patch version (the last digit) by 1.</p> <p>Code Example:</p> <pre><code>VERSION=$(cat version.txt)\nIFS='.' read -r -a parts &lt;&lt;&lt; \"$VERSION\"\nparts[2]=$((parts[2] + 1)) # Increment patch version\nNEW_VERSION=\"${parts[0]}.${parts[1]}.${parts[2]}\"\necho \"$NEW_VERSION\" &gt; version.txt\n</code></pre>"},{"location":"devops/#55-commit-the-updated-version","title":"5.5. Commit the Updated Version","text":"<p>The new version is committed to the repository with a message like:</p> <pre><code>Increment version to 4.0.1\n</code></pre>"},{"location":"devops/#56-create-a-git-tag","title":"5.6. Create a Git Tag","text":"<p>A Git tag is created using the incremented version (e.g., <code>v4.0.1</code>). This tag is used for the GitHub release.</p>"},{"location":"devops/#57-create-github-release","title":"5.7. Create GitHub Release","text":"<p>A GitHub release is created with the following information:</p> <ul> <li>Tag Name: The incremented version (e.g., <code>v4.0.1</code>).</li> <li>Release Name: \"Release v4.0.1\".</li> <li>Release Notes: The content from <code>release_notes.txt</code>.</li> </ul>"},{"location":"devops/#conclusion","title":"Conclusion","text":"<p>The Create Release workflow is a powerful system for managing software releases. It seamlessly integrates branch management, pull request tracking, versioning, and GitHub releases. By adopting this workflow, development teams can achieve:</p> <ul> <li>Efficiency: Automates tasks like generating release notes, incrementing versions, and tagging.</li> <li>Clarity: Non-technical descriptions and detailed release notes improve transparency for stakeholders.</li> <li>Consistency: A structured approach ensures that every release follows the same process.</li> <li>Traceability: Links to PRs and descriptions provide full visibility into each release.</li> </ul> <p>By following this process, development teams can focus on delivering high-quality features and fixes while maintaining a transparent and predictable release process.</p>"}]}